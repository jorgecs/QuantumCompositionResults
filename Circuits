def circuit1():
    qreg_q = QuantumRegister(10, 'q')
    creg_c = ClassicalRegister(10, 'c')
    circuit = QuantumCircuit(qreg_q, creg_c)
    circuit.x(qreg_q[0])
    circuit.x(qreg_q[9])
    circuit.h(qreg_q[1])
    circuit.swap(qreg_q[0], qreg_q[1])
    circuit.z(qreg_q[2])
    circuit.z(qreg_q[3])
    circuit.z(qreg_q[7])
    circuit.cx(qreg_q[9], qreg_q[3])
    circuit.h(qreg_q[4])
    circuit.h(qreg_q[4])
    circuit.x(qreg_q[5])
    circuit.x(qreg_q[6])
    circuit.cx(qreg_q[6], qreg_q[8])
    circuit.measure(qreg_q[0], creg_c[0])
    circuit.measure(qreg_q[1], creg_c[1])
    circuit.measure(qreg_q[2], creg_c[2])
    circuit.measure(qreg_q[3], creg_c[3])
    circuit.measure(qreg_q[4], creg_c[4])
    circuit.measure(qreg_q[5], creg_c[5])
    circuit.measure(qreg_q[6], creg_c[6])
    circuit.measure(qreg_q[7], creg_c[7])
    circuit.measure(qreg_q[8], creg_c[8])
    circuit.measure(qreg_q[9], creg_c[9])
    return circuit


def circuit2():
    qreg_q = QuantumRegister(15, 'q')
    creg_c = ClassicalRegister(15, 'c')
    circuit = QuantumCircuit(qreg_q, creg_c)
    circuit.x(qreg_q[0])
    circuit.x(qreg_q[3])
    circuit.h(qreg_q[9])
    circuit.z(qreg_q[2])
    circuit.z(qreg_q[7])
    circuit.z(qreg_q[11])
    circuit.x(qreg_q[12])
    circuit.x(qreg_q[13])
    circuit.x(qreg_q[14])
    circuit.cx(qreg_q[3], qreg_q[4])
    circuit.cx(qreg_q[9], qreg_q[10])
    circuit.x(qreg_q[5])
    circuit.x(qreg_q[6])
    circuit.swap(qreg_q[0], qreg_q[1])
    circuit.cx(qreg_q[12], qreg_q[8])
    circuit.measure(qreg_q[0], creg_c[0])
    circuit.measure(qreg_q[1], creg_c[1])
    circuit.measure(qreg_q[2], creg_c[2])
    circuit.measure(qreg_q[3], creg_c[3])
    circuit.measure(qreg_q[4], creg_c[4])
    circuit.measure(qreg_q[5], creg_c[5])
    circuit.measure(qreg_q[6], creg_c[6])
    circuit.measure(qreg_q[7], creg_c[7])
    circuit.measure(qreg_q[8], creg_c[8])
    circuit.measure(qreg_q[9], creg_c[9])
    circuit.measure(qreg_q[10], creg_c[10])
    circuit.measure(qreg_q[11], creg_c[11])
    circuit.measure(qreg_q[12], creg_c[12])
    circuit.measure(qreg_q[13], creg_c[13])
    circuit.measure(qreg_q[14], creg_c[14])
    return circuit

def circuit3():
    qreg_q = QuantumRegister(15, 'q')
    creg_c = ClassicalRegister(15, 'c')
    circuit = QuantumCircuit(qreg_q, creg_c)
    circuit.x(qreg_q[9])
    circuit.x(qreg_q[13])
    circuit.x(qreg_q[14])
    circuit.h(qreg_q[4])
    circuit.h(qreg_q[4])
    circuit.x(qreg_q[0])
    circuit.x(qreg_q[3])
    circuit.x(qreg_q[4])
    circuit.z(qreg_q[2])
    circuit.z(qreg_q[12])
    circuit.h(qreg_q[3])
    circuit.cx(qreg_q[3], qreg_q[0])
    circuit.cx(qreg_q[9], qreg_q[0])
    circuit.x(qreg_q[6])
    circuit.x(qreg_q[7])
    circuit.x(qreg_q[8])
    circuit.z(qreg_q[1])
    circuit.z(qreg_q[5])
    circuit.cx(qreg_q[14], qreg_q[13])
    circuit.measure(qreg_q[0], creg_c[0])
    circuit.measure(qreg_q[1], creg_c[1])
    circuit.measure(qreg_q[2], creg_c[2])
    circuit.measure(qreg_q[3], creg_c[3])
    circuit.measure(qreg_q[4], creg_c[4])
    circuit.measure(qreg_q[5], creg_c[5])
    circuit.measure(qreg_q[6], creg_c[6])
    circuit.measure(qreg_q[7], creg_c[7])
    circuit.measure(qreg_q[8], creg_c[8])
    circuit.measure(qreg_q[9], creg_c[9])
    circuit.measure(qreg_q[10], creg_c[10])
    circuit.measure(qreg_q[11], creg_c[11])
    circuit.measure(qreg_q[12], creg_c[12])
    circuit.measure(qreg_q[13], creg_c[13])
    circuit.measure(qreg_q[14], creg_c[14])
    return circuit

def circuit4():
    qreg_q = QuantumRegister(15, 'q')
    creg_c = ClassicalRegister(15, 'c')
    circuit = QuantumCircuit(qreg_q, creg_c)
    circuit.x(qreg_q[7])
    circuit.x(qreg_q[8])
    circuit.x(qreg_q[11])
    circuit.h(qreg_q[1])
    circuit.h(qreg_q[14])
    circuit.h(qreg_q[14])
    circuit.cx(qreg_q[7], qreg_q[10])
    circuit.x(qreg_q[4])
    circuit.x(qreg_q[12])
    circuit.x(qreg_q[13])
    circuit.z(qreg_q[1])
    circuit.z(qreg_q[2])
    circuit.cx(qreg_q[4], qreg_q[3])
    circuit.x(qreg_q[6])
    circuit.x(qreg_q[7])
    circuit.x(qreg_q[8])
    circuit.x(qreg_q[9])
    circuit.z(qreg_q[12])
    circuit.cx(qreg_q[0], qreg_q[1])
    circuit.measure(qreg_q[0], creg_c[0])
    circuit.measure(qreg_q[1], creg_c[1])
    circuit.measure(qreg_q[2], creg_c[2])
    circuit.measure(qreg_q[3], creg_c[3])
    circuit.measure(qreg_q[4], creg_c[4])
    circuit.measure(qreg_q[5], creg_c[5])
    circuit.measure(qreg_q[6], creg_c[6])
    circuit.measure(qreg_q[7], creg_c[7])
    circuit.measure(qreg_q[8], creg_c[8])
    circuit.measure(qreg_q[9], creg_c[9])
    circuit.measure(qreg_q[10], creg_c[10])
    circuit.measure(qreg_q[11], creg_c[11])
    circuit.measure(qreg_q[12], creg_c[12])
    circuit.measure(qreg_q[13], creg_c[13])
    circuit.measure(qreg_q[14], creg_c[14])
    return circuit

def circuit5():
    qreg_q = QuantumRegister(10, 'q')
    creg_c = ClassicalRegister(10, 'c')
    circuit = QuantumCircuit(qreg_q, creg_c)
    circuit.h(qreg_q[0])
    circuit.x(qreg_q[3])
    circuit.z(qreg_q[7])
    circuit.z(qreg_q[9])
    circuit.cx(qreg_q[3], qreg_q[1])
    circuit.cx(qreg_q[8], qreg_q[7])
    circuit.measure(qreg_q[0], creg_c[0])
    circuit.measure(qreg_q[1], creg_c[1])
    circuit.measure(qreg_q[2], creg_c[2])
    circuit.measure(qreg_q[3], creg_c[3])
    circuit.measure(qreg_q[4], creg_c[4])
    circuit.measure(qreg_q[5], creg_c[5])
    circuit.measure(qreg_q[6], creg_c[6])
    circuit.measure(qreg_q[7], creg_c[7])
    circuit.measure(qreg_q[8], creg_c[8])
    circuit.measure(qreg_q[9], creg_c[9])
    return circuit
    
def circuit6():
    qreg_q = QuantumRegister(15, 'q')
    creg_c = ClassicalRegister(15, 'c')
    circuit = QuantumCircuit(qreg_q, creg_c)
    circuit.cx(qreg_q[11], qreg_q[9])
    circuit.cx(qreg_q[7], qreg_q[10])
    circuit.h(qreg_q[9])
    circuit.cx(qreg_q[6], qreg_q[0])
    circuit.x(qreg_q[5])
    circuit.x(qreg_q[12])
    circuit.x(qreg_q[13])
    circuit.z(qreg_q[1])
    circuit.z(qreg_q[2])
    circuit.cx(qreg_q[4], qreg_q[3])
    circuit.x(qreg_q[9])
    circuit.x(qreg_q[13])
    circuit.z(qreg_q[9])
    circuit.measure(qreg_q[0], creg_c[0])
    circuit.measure(qreg_q[1], creg_c[1])
    circuit.measure(qreg_q[2], creg_c[2])
    circuit.measure(qreg_q[3], creg_c[3])
    circuit.measure(qreg_q[4], creg_c[4])
    circuit.measure(qreg_q[5], creg_c[5])
    circuit.measure(qreg_q[6], creg_c[6])
    circuit.measure(qreg_q[7], creg_c[7])
    circuit.measure(qreg_q[8], creg_c[8])
    circuit.measure(qreg_q[9], creg_c[9])
    circuit.measure(qreg_q[10], creg_c[10])
    circuit.measure(qreg_q[11], creg_c[11])
    circuit.measure(qreg_q[12], creg_c[12])
    circuit.measure(qreg_q[13], creg_c[13])
    circuit.measure(qreg_q[14], creg_c[14])
    return circuit

def circuit7():
    qreg_q = QuantumRegister(15, 'q')
    creg_c = ClassicalRegister(15, 'c')
    circuit = QuantumCircuit(qreg_q, creg_c)
    circuit.x(qreg_q[0])
    circuit.x(qreg_q[11])
    circuit.x(qreg_q[12])
    circuit.z(qreg_q[4])
    circuit.cx(qreg_q[6], qreg_q[4])
    circuit.h(qreg_q[10])
    circuit.cx(qreg_q[3], qreg_q[4])
    circuit.x(qreg_q[0])
    circuit.x(qreg_q[8])
    circuit.z(qreg_q[1])
    circuit.z(qreg_q[2])
    circuit.cx(qreg_q[4], qreg_q[3])
    circuit.cx(qreg_q[8], qreg_q[7])
    circuit.x(qreg_q[9])
    circuit.z(qreg_q[11])
    circuit.measure(qreg_q[0], creg_c[0])
    circuit.measure(qreg_q[1], creg_c[1])
    circuit.measure(qreg_q[2], creg_c[2])
    circuit.measure(qreg_q[3], creg_c[3])
    circuit.measure(qreg_q[4], creg_c[4])
    circuit.measure(qreg_q[5], creg_c[5])
    circuit.measure(qreg_q[6], creg_c[6])
    circuit.measure(qreg_q[7], creg_c[7])
    circuit.measure(qreg_q[8], creg_c[8])
    circuit.measure(qreg_q[9], creg_c[9])
    circuit.measure(qreg_q[10], creg_c[10])
    circuit.measure(qreg_q[11], creg_c[11])
    circuit.measure(qreg_q[12], creg_c[12])
    circuit.measure(qreg_q[13], creg_c[13])
    circuit.measure(qreg_q[14], creg_c[14])
    return circuit
    
def circuit8():
    qreg_q = QuantumRegister(15, 'q')
    creg_c = ClassicalRegister(15, 'c')
    circuit = QuantumCircuit(qreg_q, creg_c)
    circuit.x(qreg_q[7])
    circuit.x(qreg_q[14])
    circuit.x(qreg_q[5])
    circuit.x(qreg_q[7])
    circuit.x(qreg_q[8])
    circuit.cx(qreg_q[4], qreg_q[12])
    circuit.cx(qreg_q[8], qreg_q[11])
    circuit.h(qreg_q[0])
    circuit.z(qreg_q[2])
    circuit.z(qreg_q[3])
    circuit.z(qreg_q[13])
    circuit.measure(qreg_q[0], creg_c[0])
    circuit.measure(qreg_q[1], creg_c[1])
    circuit.measure(qreg_q[2], creg_c[2])
    circuit.measure(qreg_q[3], creg_c[3])
    circuit.measure(qreg_q[4], creg_c[4])
    circuit.measure(qreg_q[5], creg_c[5])
    circuit.measure(qreg_q[6], creg_c[6])
    circuit.measure(qreg_q[7], creg_c[7])
    circuit.measure(qreg_q[8], creg_c[8])
    circuit.measure(qreg_q[9], creg_c[9])
    circuit.measure(qreg_q[10], creg_c[10])
    circuit.measure(qreg_q[11], creg_c[11])
    circuit.measure(qreg_q[12], creg_c[12])
    circuit.measure(qreg_q[13], creg_c[13])
    circuit.measure(qreg_q[14], creg_c[14])
    return circuit

def circuit9():
    qreg_q = QuantumRegister(7, 'q')
    creg_c = ClassicalRegister(7, 'c')
    circuit = QuantumCircuit(qreg_q, creg_c)
    circuit.h(qreg_q[0])
    circuit.x(qreg_q[6])
    circuit.cx(qreg_q[6], qreg_q[5])
    circuit.measure(qreg_q[0], creg_c[0])
    circuit.measure(qreg_q[1], creg_c[1])
    circuit.measure(qreg_q[2], creg_c[2])
    circuit.measure(qreg_q[3], creg_c[3])
    circuit.measure(qreg_q[4], creg_c[4])
    circuit.measure(qreg_q[5], creg_c[5])
    circuit.measure(qreg_q[6], creg_c[6])
    return circuit
    
def circuit10():
    qreg_q = QuantumRegister(10, 'q')
    creg_c = ClassicalRegister(10, 'c')
    circuit = QuantumCircuit(qreg_q, creg_c)
    circuit.h(qreg_q[5])
    circuit.x(qreg_q[0])
    circuit.x(qreg_q[2])
    circuit.x(qreg_q[4])
    circuit.cx(qreg_q[0], qreg_q[1])
    circuit.z(qreg_q[9])
    circuit.measure(qreg_q[0], creg_c[0])
    circuit.measure(qreg_q[1], creg_c[1])
    circuit.measure(qreg_q[2], creg_c[2])
    circuit.measure(qreg_q[3], creg_c[3])
    circuit.measure(qreg_q[4], creg_c[4])
    circuit.measure(qreg_q[5], creg_c[5])
    circuit.measure(qreg_q[6], creg_c[6])
    circuit.measure(qreg_q[7], creg_c[7])
    circuit.measure(qreg_q[8], creg_c[8])
    circuit.measure(qreg_q[9], creg_c[9])
    return circuit

def circuit127():
    qreg_q = QuantumRegister(127, 'q')
    creg_c = ClassicalRegister(127, 'c')
    circuit = QuantumCircuit(qreg_q, creg_c)
    circuit.x(qreg_q[0])
    circuit.x(qreg_q[9])
    circuit.h(qreg_q[1])
    circuit.swap(qreg_q[0], qreg_q[1])
    circuit.z(qreg_q[2])
    circuit.z(qreg_q[3])
    circuit.z(qreg_q[7])
    circuit.cx(qreg_q[9], qreg_q[3])
    circuit.h(qreg_q[4])
    circuit.h(qreg_q[4])
    circuit.x(qreg_q[5])
    circuit.x(qreg_q[6])
    circuit.cx(qreg_q[6], qreg_q[8])
    circuit.measure(qreg_q[0], creg_c[0])
    circuit.measure(qreg_q[1], creg_c[1])
    circuit.measure(qreg_q[2], creg_c[2])
    circuit.measure(qreg_q[3], creg_c[3])
    circuit.measure(qreg_q[4], creg_c[4])
    circuit.measure(qreg_q[5], creg_c[5])
    circuit.measure(qreg_q[6], creg_c[6])
    circuit.measure(qreg_q[7], creg_c[7])
    circuit.measure(qreg_q[8], creg_c[8])
    circuit.measure(qreg_q[9], creg_c[9]),
    circuit.x(qreg_q[10])
    circuit.x(qreg_q[13])
    circuit.h(qreg_q[19])
    circuit.z(qreg_q[12])
    circuit.z(qreg_q[17])
    circuit.z(qreg_q[21])
    circuit.x(qreg_q[22])
    circuit.x(qreg_q[23])
    circuit.x(qreg_q[24])
    circuit.cx(qreg_q[13], qreg_q[14])
    circuit.cx(qreg_q[19], qreg_q[20])
    circuit.x(qreg_q[15])
    circuit.x(qreg_q[16])
    circuit.swap(qreg_q[10], qreg_q[11])
    circuit.cx(qreg_q[22], qreg_q[18])
    circuit.measure(qreg_q[10], creg_c[10])
    circuit.measure(qreg_q[11], creg_c[11])
    circuit.measure(qreg_q[12], creg_c[12])
    circuit.measure(qreg_q[13], creg_c[13])
    circuit.measure(qreg_q[14], creg_c[14])
    circuit.measure(qreg_q[15], creg_c[15])
    circuit.measure(qreg_q[16], creg_c[16])
    circuit.measure(qreg_q[17], creg_c[17])
    circuit.measure(qreg_q[18], creg_c[18])
    circuit.measure(qreg_q[19], creg_c[19])
    circuit.measure(qreg_q[20], creg_c[20])
    circuit.measure(qreg_q[21], creg_c[21])
    circuit.measure(qreg_q[22], creg_c[22])
    circuit.measure(qreg_q[23], creg_c[23])
    circuit.measure(qreg_q[24], creg_c[24])
    circuit.x(qreg_q[34])
    circuit.x(qreg_q[38])
    circuit.x(qreg_q[39])
    circuit.h(qreg_q[29])
    circuit.h(qreg_q[29])
    circuit.x(qreg_q[25])
    circuit.x(qreg_q[28])
    circuit.x(qreg_q[29])
    circuit.z(qreg_q[27])
    circuit.z(qreg_q[37])
    circuit.h(qreg_q[28])
    circuit.cx(qreg_q[28], qreg_q[25])
    circuit.cx(qreg_q[34], qreg_q[25])
    circuit.x(qreg_q[31])
    circuit.x(qreg_q[32])
    circuit.x(qreg_q[33])
    circuit.z(qreg_q[26])
    circuit.z(qreg_q[30])
    circuit.cx(qreg_q[39], qreg_q[38])
    circuit.measure(qreg_q[25], creg_c[25])
    circuit.measure(qreg_q[26], creg_c[26])
    circuit.measure(qreg_q[27], creg_c[27])
    circuit.measure(qreg_q[28], creg_c[28])
    circuit.measure(qreg_q[29], creg_c[29])
    circuit.measure(qreg_q[30], creg_c[30])
    circuit.measure(qreg_q[31], creg_c[31])
    circuit.measure(qreg_q[32], creg_c[32])
    circuit.measure(qreg_q[33], creg_c[33])
    circuit.measure(qreg_q[34], creg_c[34])
    circuit.measure(qreg_q[35], creg_c[35])
    circuit.measure(qreg_q[36], creg_c[36])
    circuit.measure(qreg_q[37], creg_c[37])
    circuit.measure(qreg_q[38], creg_c[38])
    circuit.measure(qreg_q[39], creg_c[39])
    circuit.x(qreg_q[47])
    circuit.x(qreg_q[48])
    circuit.x(qreg_q[51])
    circuit.h(qreg_q[41])
    circuit.h(qreg_q[54])
    circuit.h(qreg_q[54])
    circuit.cx(qreg_q[47], qreg_q[50])
    circuit.x(qreg_q[44])
    circuit.x(qreg_q[52])
    circuit.x(qreg_q[53])
    circuit.z(qreg_q[41])
    circuit.z(qreg_q[42])
    circuit.cx(qreg_q[44], qreg_q[43])
    circuit.x(qreg_q[46])
    circuit.x(qreg_q[47])
    circuit.x(qreg_q[48])
    circuit.x(qreg_q[49])
    circuit.z(qreg_q[52])
    circuit.cx(qreg_q[40], qreg_q[41])
    circuit.measure(qreg_q[40], creg_c[40])
    circuit.measure(qreg_q[41], creg_c[41])
    circuit.measure(qreg_q[42], creg_c[42])
    circuit.measure(qreg_q[43], creg_c[43])
    circuit.measure(qreg_q[44], creg_c[44])
    circuit.measure(qreg_q[45], creg_c[45])
    circuit.measure(qreg_q[46], creg_c[46])
    circuit.measure(qreg_q[47], creg_c[47])
    circuit.measure(qreg_q[48], creg_c[48])
    circuit.measure(qreg_q[49], creg_c[49])
    circuit.measure(qreg_q[50], creg_c[50])
    circuit.measure(qreg_q[51], creg_c[51])
    circuit.measure(qreg_q[52], creg_c[52])
    circuit.measure(qreg_q[53], creg_c[53])
    circuit.measure(qreg_q[54], creg_c[54])
    circuit.h(qreg_q[55])
    circuit.x(qreg_q[58])
    circuit.z(qreg_q[62])
    circuit.z(qreg_q[64])
    circuit.cx(qreg_q[58], qreg_q[56])
    circuit.cx(qreg_q[63], qreg_q[62])
    circuit.measure(qreg_q[55], creg_c[55])
    circuit.measure(qreg_q[56], creg_c[56])
    circuit.measure(qreg_q[57], creg_c[57])
    circuit.measure(qreg_q[58], creg_c[58])
    circuit.measure(qreg_q[59], creg_c[59])
    circuit.measure(qreg_q[60], creg_c[60])
    circuit.measure(qreg_q[61], creg_c[61])
    circuit.measure(qreg_q[62], creg_c[62])
    circuit.measure(qreg_q[63], creg_c[63])
    circuit.measure(qreg_q[64], creg_c[64])
    circuit.cx(qreg_q[76], qreg_q[74])
    circuit.cx(qreg_q[72], qreg_q[75])
    circuit.h(qreg_q[79])
    circuit.cx(qreg_q[71], qreg_q[65])
    circuit.x(qreg_q[70])
    circuit.x(qreg_q[77])
    circuit.x(qreg_q[78])
    circuit.z(qreg_q[66])
    circuit.z(qreg_q[67])
    circuit.cx(qreg_q[69], qreg_q[68])
    circuit.x(qreg_q[74])
    circuit.x(qreg_q[78])
    circuit.z(qreg_q[74])
    circuit.measure(qreg_q[65], creg_c[65])
    circuit.measure(qreg_q[66], creg_c[66])
    circuit.measure(qreg_q[67], creg_c[67])
    circuit.measure(qreg_q[68], creg_c[68])
    circuit.measure(qreg_q[69], creg_c[69])
    circuit.measure(qreg_q[70], creg_c[70])
    circuit.measure(qreg_q[71], creg_c[71])
    circuit.measure(qreg_q[72], creg_c[72])
    circuit.measure(qreg_q[73], creg_c[73])
    circuit.measure(qreg_q[74], creg_c[74])
    circuit.measure(qreg_q[75], creg_c[75])
    circuit.measure(qreg_q[76], creg_c[76])
    circuit.measure(qreg_q[77], creg_c[77])
    circuit.measure(qreg_q[78], creg_c[78])
    circuit.measure(qreg_q[79], creg_c[79])
    circuit.x(qreg_q[80])
    circuit.x(qreg_q[91])
    circuit.x(qreg_q[92])
    circuit.z(qreg_q[84])
    circuit.cx(qreg_q[86], qreg_q[84])
    circuit.h(qreg_q[90])
    circuit.cx(qreg_q[83], qreg_q[84])
    circuit.x(qreg_q[80])
    circuit.x(qreg_q[88])
    circuit.z(qreg_q[81])
    circuit.z(qreg_q[82])
    circuit.cx(qreg_q[84], qreg_q[83])
    circuit.cx(qreg_q[88], qreg_q[87])
    circuit.x(qreg_q[89])
    circuit.z(qreg_q[91])
    circuit.measure(qreg_q[80], creg_c[80])
    circuit.measure(qreg_q[81], creg_c[81])
    circuit.measure(qreg_q[82], creg_c[82])
    circuit.measure(qreg_q[83], creg_c[83])
    circuit.measure(qreg_q[84], creg_c[84])
    circuit.measure(qreg_q[85], creg_c[85])
    circuit.measure(qreg_q[86], creg_c[86])
    circuit.measure(qreg_q[87], creg_c[87])
    circuit.measure(qreg_q[88], creg_c[88])
    circuit.measure(qreg_q[89], creg_c[89])
    circuit.measure(qreg_q[90], creg_c[90])
    circuit.measure(qreg_q[91], creg_c[91])
    circuit.measure(qreg_q[92], creg_c[92])
    circuit.measure(qreg_q[93], creg_c[93])
    circuit.measure(qreg_q[94], creg_c[94])
    circuit.x(qreg_q[102])
    circuit.x(qreg_q[109])
    circuit.x(qreg_q[100])
    circuit.x(qreg_q[102])
    circuit.x(qreg_q[103])
    circuit.cx(qreg_q[99], qreg_q[107])
    circuit.cx(qreg_q[103], qreg_q[106])
    circuit.h(qreg_q[95])
    circuit.z(qreg_q[97])
    circuit.z(qreg_q[98])
    circuit.z(qreg_q[108])
    circuit.measure(qreg_q[95], creg_c[95])
    circuit.measure(qreg_q[96], creg_c[96])
    circuit.measure(qreg_q[97], creg_c[97])
    circuit.measure(qreg_q[98], creg_c[98])
    circuit.measure(qreg_q[99], creg_c[99])
    circuit.measure(qreg_q[100], creg_c[100])
    circuit.measure(qreg_q[101], creg_c[101])
    circuit.measure(qreg_q[102], creg_c[102])
    circuit.measure(qreg_q[103], creg_c[103])
    circuit.measure(qreg_q[104], creg_c[104])
    circuit.measure(qreg_q[105], creg_c[105])
    circuit.measure(qreg_q[106], creg_c[106])
    circuit.measure(qreg_q[107], creg_c[107])
    circuit.measure(qreg_q[108], creg_c[108])
    circuit.measure(qreg_q[109], creg_c[109])
    circuit.h(qreg_q[110])
    circuit.x(qreg_q[116])
    circuit.cx(qreg_q[116], qreg_q[115])
    circuit.measure(qreg_q[110], creg_c[110])
    circuit.measure(qreg_q[111], creg_c[111])
    circuit.measure(qreg_q[112], creg_c[112])
    circuit.measure(qreg_q[113], creg_c[113])
    circuit.measure(qreg_q[114], creg_c[114])
    circuit.measure(qreg_q[115], creg_c[115])
    circuit.measure(qreg_q[116], creg_c[116])
    circuit.h(qreg_q[122])
    circuit.x(qreg_q[117])
    circuit.x(qreg_q[119])
    circuit.x(qreg_q[121])
    circuit.cx(qreg_q[117], qreg_q[118])
    circuit.z(qreg_q[126])
    circuit.measure(qreg_q[117], creg_c[117])
    circuit.measure(qreg_q[118], creg_c[118])
    circuit.measure(qreg_q[119], creg_c[119])
    circuit.measure(qreg_q[120], creg_c[120])
    circuit.measure(qreg_q[121], creg_c[121])
    circuit.measure(qreg_q[122], creg_c[122])
    circuit.measure(qreg_q[123], creg_c[123])
    circuit.measure(qreg_q[124], creg_c[124])
    circuit.measure(qreg_q[125], creg_c[125])
    circuit.measure(qreg_q[126], creg_c[126])
    return circuit
